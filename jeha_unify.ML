(* Wrappers around Isabelles unfication functions. *)

signature JEHA_UNIFY =
sig
  (* from unify.ML *)
  val smash_unifiers: Context.generic -> (term * term) list -> Envir.env -> Envir.env Seq.seq
  (* from more_unify.ML *)
  val matchers: Context.generic -> int -> (term * term) list -> Envir.env Seq.seq
  (* unification and matching of (symmetric!) equality literals *)
  val literal_smash_unifiers : Context.generic -> (JLit.T * JLit.T) -> Envir.env -> Envir.env Seq.seq
  val literal_matchers :
    Context.generic -> int -> (JLit.T * JLit.T) -> (JLit.lpos * Envir.env) Seq.seq
end

structure Jeha_Unify : JEHA_UNIFY =
struct

fun with_timeout ctxt (xq : 'a Seq.seq) : 'a Seq.seq =
  let
    val timeout = Time.fromMilliseconds (Config.get_generic ctxt Jeha_Common.unify_timeout_ms)
  in
    if timeout = Time.zeroTime
      then xq
      else
        Seq.make (fn () =>
          (case (Timeout.apply timeout Seq.pull) xq of
            NONE => NONE
          | SOME (x, xq') => SOME (x, with_timeout ctxt xq'))
          handle Timeout.TIMEOUT _ => NONE
        )
  end

(* Needed because of the following remark in unify.ML:
"The outermost functions assume the terms to be unified already have the same type." *)
fun give_to_undefined t =
  let
    val T = fastype_of t handle TERM e => (writeln ("BIG ERROR (TERM)" ^ @{make_string} t); raise TERM e)
  in
    (* FIXME: there might be a better approach *)
    (* use dummyT instead of unit to depend on less of HOL *)
    Const (@{const_name undefined}, T --> dummyT) $ t
  end

fun silence_context ctxt =
    if not (Config.get_generic ctxt Jeha_Common.supress_unify_trace) then ctxt else
    (* disable very long Enter MATCH tracing messages when unification bound is exceeded *)
    (* based on slience_methods from try0.ML *)
    ctxt
    |> Context.the_proof
    |> Context_Position.set_visible false
    |> (fn ctxt => Config.put Unify.unify_trace_bound (Config.get ctxt Unify.search_bound) ctxt)
    |> Proof_Context.background_theory
        (fn thy => thy
          |> Context_Position.set_visible_global false
          |> Config.put_global Unify.unify_trace_bound (Config.get_global thy Unify.search_bound))
    |> Context.Proof

fun smash_unifiers ctxt tus env =
  let
    (* val _ = Jeha_Common.trace_msg (Context.the_proof ctxt) (fn () => "unifying: " ^ fold (curry (op ^)) (map ((fn (l, r) => l ^ " = " ^ r ^ ", ") o apply2 (Jeha_Common.pretty_term (Context.the_proof ctxt))) tus) "") *)
    (* disable very long Enter MATCH tracing messages when unification bound is exceeded *)
    (* based on slience_methods from try0.ML *)
    val ctxt = silence_context ctxt
    val maxidx =
      fold
        (fn tu => fn maxidx => Int.max (maxidx, Int.max (apply2 maxidx_of_term tu)))
        tus
        ~1
    val env = Envir.merge (Envir.empty maxidx, env)
    val tus = map (apply2 give_to_undefined) tus
  in
    Unify.smash_unifiers ctxt tus env
    |> with_timeout ctxt
  end

fun matchers ctxt maxidx pairs =
  let
    val maxidx = Int.max (maxidx, 0)
    val ctxt = silence_context ctxt
    (* ensures that fresh variables generated by Unify.smash_unifiers (called by
    Unify.matchers below) are greater than maxidx *)
    val v_pattern = Var (("maxidxforcer_pattern", maxidx), dummyT)
    val v_term = Var (("maxidxforcer_term", maxidx), dummyT)
    val pairs = map (apply2 give_to_undefined) ((v_pattern, v_term) :: pairs)
  in
    Unify.matchers ctxt pairs
    |> with_timeout ctxt
  end

fun literal_smash_unifiers ctxt ((s, t, b), (s', t', b')) env =
  if not (b = b') then Seq.empty else
  Seq.interleave
    ( smash_unifiers ctxt [(s, s'), (t, t')] env
    , smash_unifiers ctxt [(s, t'), (t, s')] env )

fun literal_matchers ctxt maxidx ((s, t, b), (s', t', b')) =
  if not (b = b') then Seq.empty else
    ( [(s, s'), (t, t')]
    , [(s, t'), (t, s')] )
    |> apply2 (matchers ctxt maxidx)
    |> (fn (left_matchers, right_matchers) =>
      (Seq.map (pair JLit.Left) left_matchers, Seq.map (pair JLit.Right) right_matchers))
    |> Seq.interleave

end
